/* I think that .col-1, .shadow, and other classes have caused some uneven spacing between elements on the webpages; I'll fiddle around with this later. */

@import url('https://fonts.googleapis.com/css?family=Elsie+Swash+Caps:400,900');
@import url('https://fonts.googleapis.com/css?family=Clicker+Script');

/*//////////// GLOBAL ////////////*/

h3 {
  margin: 0 0 10px;
}

p {
  font-size: 1em; /* 16px, ?pt, 100%, 1em */
  line-height: 1.5em;
}

figure {
  margin: 0 0 10px;
}

figcaption {
  /*font-weight: normal;
  font-size: 0.75em;
  line-height: 1.5em;
  font-family: Georgia, "Times New Roman", serif;*/
  font: normal 0.75em/1.5em 'Elsie Swash Caps', cursive; 
  /* Note: Georgia is MUCH easier to see than either of the imported fonts. */
  color: #777;
  text-align: right;
}

.milk-text {
  font: bold 2.6em "Elsie Swash Caps", cursive;
  /* I may change the font to Clicker Script later. */
  color: white;
  text-shadow: 0 2px 3px #000;
}

.shadow { /* Adds a drop shadow to an element */
  box-shadow: 0 3px 10px #333;
}

.border-right {
  border-right: 1px dotted #ccc;
  padding-right: 30px;
}


/*//////////// BACKGROUNDS ////////////*/

.white-wood { /* Remember to do this when I want to add a background image! */
  background: url(../images/white-wood.jpg) no-repeat center top;
  background-size: cover;
}

/* The following gradients were made on http://www.colorzilla.com/gradient-editor/. */

.light-fade { /* Fades from gray to white to gray (top to bottom) */
  background: #efefef; /* Old browsers */
  background: -moz-linear-gradient(
    top,
    #efefef 0%,
    #ffffff 24%,
    #ffffff 68%,
    #dddddd 100%
  ); /* FF3.6+ */
  background: -webkit-gradient(
    linear,
    left top,
    left bottom,
    color-stop(0%, #efefef),
    color-stop(24%, #ffffff),
    color-stop(68%, #ffffff),
    color-stop(100%, #dddddd)
  ); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(
    top,
    #efefef 0%,
    #ffffff 24%,
    #ffffff 68%,
    #dddddd 100%
  ); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(
    top,
    #efefef 0%,
    #ffffff 24%,
    #ffffff 68%,
    #dddddd 100%
  ); /* Opera 11.10+ */
  background: -ms-linear-gradient(
    top,
    #efefef 0%,
    #ffffff 24%,
    #ffffff 68%,
    #dddddd 100%
  ); /* IE10+ */
  background: linear-gradient(
    to bottom,
    #efefef 0%,
    #ffffff 24%,
    #ffffff 68%,
    #dddddd 100%
  ); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#efefef", endColorstr="#dddddd", GradientType=0); /* IE6-9 */
}

.medium-fade { /* Fades from a darker gray (top) to a lighter gray (bottom) */
  /* Interesting. The filter property isn't specified here. */
  background: rgb(229, 229, 229); /* Old browsers */
  background: -moz-linear-gradient(
    top,
    rgba(229, 229, 229, 1) 0%,
    rgba(255, 255, 255, 1) 99%
  ); /* FF3.6+ */
  background: -webkit-gradient(
    linear,
    left top,
    left bottom,
    color-stop(0%, rgba(229, 229, 229, 1)),
    color-stop(99%, rgba(255, 255, 255, 1))
  ); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(
    top,
    rgba(229, 229, 229, 1) 0%,
    rgba(255, 255, 255, 1) 99%
  ); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(
    top,
    rgba(229, 229, 229, 1) 0%,
    rgba(255, 255, 255, 1) 99%
  ); /* Opera 11.10+ */
  background: -ms-linear-gradient(
    top,
    rgba(229, 229, 229, 1) 0%,
    rgba(255, 255, 255, 1) 99%
  ); /* IE10+ */
  background: linear-gradient(
    to bottom,
    rgba(229, 229, 229, 1) 0%,
    rgba(255, 255, 255, 1) 99%
  ); /* W3C */
}

/*//////// MEDIA ////////*/

img, video, audio, iframe, table, form {
  width: 100%; /* IE */
  max-width: 100%; /* FF, Safari, Chrome */
}

/*//////// FIXES ////////*/

* {
  -webkit-box-sizing: border-box; /* Older versions of Safari */
  -moz-box-sizing: border-box; /* Older versions of Firefox */
  box-sizing: border-box; /* Virtually everything else */
}

.clearfix::after {
  content: ".";
  display: block;
  clear: both;
  visibility: hidden;
  height: 0;
  line-height: 0;
}

.clear {
  clear: both;
}

/*//////// LAYOUT ////////*/

.wrapper {
  width: 960px;
  margin: 0 auto;
}

.col-1 {
  float: left;
  width: 32%;
}

.col-2 {
  float: left;
  width: 66%;
}

.col-3 { /* Delete this unless I use it in another lesson. */
}

[class*="col-"] {
  margin-left: 2%;
}

.first {
  margin-left: 0; 
}

/*//////// SOCIAL ////////*/

#social {
  position: fixed;
  top: 200px;
  right: 20px;
  width: 40px;
  z-index: 1;
}

#social a {
  display: block;
  width: 40px;
  height: 40px;
  background: yellow;
}

/*////////// HEADER //////////*/

header {
  /* margin: 0 0 30px; */
  margin-bottom: 30px; /* I'm pretty sure that this is equivalent to the above statement, since the default margin appears to be zero. */
}

/*////////// NAVBAR //////////*/

#navbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 2; /* This makes SURE it's positioned on top of everything else. */
  border-bottom: 1px solid #ccc;
  text-align: center; /* This causes everything inside of the #navbar to align to the center. */
}

#navbar nav {
  border-left: 1px solid #ccc;
}

#navbar nav a { /* See the STYLING NOTES for more info. */
  display: inline-block;
  width: 16.6666667%;
  margin: 0; /* The idea is to have no margin between the links, but I'm almost CERTAIN that this is the default. I'll comment out this property later if it doesn't change anything. */
  padding: 22px 0;
  text-transform: uppercase;
  color: black;
  text-align: center; /* This may not be needed; it appears to be inherited from the #navbar element, anyway. */
  border-right: 1px solid #ccc;
  text-decoration: none;
  font: 1em, "Trebuchet MS", Arial, sans-serif;
}

#navbar nav a.selected { /* This is for visually showing which page the user is on.
  See the STYLING NOTES for more information. */
  background: #333;
  color: white;
}

#navbar nav a:hover { /* This is NOT in the STYLING NOTES. */
  color: white;
  background: rgb(0, 0, 0); /* Old browsers */
  background: -moz-linear-gradient(
    top,
    rgba(0, 0, 0, 1) 0%,
    rgba(71, 71, 71, 1) 28%,
    rgba(81, 81, 81, 1) 35%,
    rgba(71, 71, 71, 1) 72%,
    rgba(43, 43, 43, 1) 87%,
    rgba(28, 28, 28, 1) 91%,
    rgba(0, 0, 0, 1) 100%
  ); /* FF3.6+ */
  background: -webkit-gradient(
    linear,
    left top,
    left bottom,
    color-stop(0%, rgba(0, 0, 0, 1)),
    color-stop(28%, rgba(71, 71, 71, 1)),
    color-stop(35%, rgba(81, 81, 81, 1)),
    color-stop(72%, rgba(71, 71, 71, 1)),
    color-stop(87%, rgba(43, 43, 43, 1)),
    color-stop(91%, rgba(28, 28, 28, 1)),
    color-stop(100%, rgba(0, 0, 0, 1))
  ); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(
    top,
    rgba(0, 0, 0, 1) 0%,
    rgba(71, 71, 71, 1) 28%,
    rgba(81, 81, 81, 1) 35%,
    rgba(71, 71, 71, 1) 72%,
    rgba(43, 43, 43, 1) 87%,
    rgba(28, 28, 28, 1) 91%,
    rgba(0, 0, 0, 1) 100%
  ); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(
    top,
    rgba(0, 0, 0, 1) 0%,
    rgba(71, 71, 71, 1) 28%,
    rgba(81, 81, 81, 1) 35%,
    rgba(71, 71, 71, 1) 72%,
    rgba(43, 43, 43, 1) 87%,
    rgba(28, 28, 28, 1) 91%,
    rgba(0, 0, 0, 1) 100%
  ); /* Opera 11.10+ */
  background: -ms-linear-gradient(
    top,
    rgba(0, 0, 0, 1) 0%,
    rgba(71, 71, 71, 1) 28%,
    rgba(81, 81, 81, 1) 35%,
    rgba(71, 71, 71, 1) 72%,
    rgba(43, 43, 43, 1) 87%,
    rgba(28, 28, 28, 1) 91%,
    rgba(0, 0, 0, 1) 100%
  ); /* IE10+ */
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 1) 0%,
    rgba(71, 71, 71, 1) 28%,
    rgba(81, 81, 81, 1) 35%,
    rgba(71, 71, 71, 1) 72%,
    rgba(43, 43, 43, 1) 87%,
    rgba(28, 28, 28, 1) 91%,
    rgba(0, 0, 0, 1) 100%
  ); /* W3C */
  /* Evidently, the filter property is not needed here, either. */
}

/*////////// LOGO //////////*/

#logo { /* This pushes the logo below the fixed navbar. */
  padding: 84px 0 0; /* I'm pretty sure that this is equivalent to "padding-top: 84px", but this ensures that we don't have extra padding anywhere else. */
}

#logo h1 {
  font-family: 'Clicker Script', cursive;
  margin: 0; /* This gets rid of unwanted spacing. */
}

#logo h2 {
  font-family: 'Elsie Swash Caps', cursive;
  margin: 0; /* This gets rid of unwanted spacing. */
}

/*//////// MAIN SECTIONS ////////*/

section {
  padding: 30px;
  margin-bottom: 20px;
  background: white; /* This is needed to help the text stand out against the .white-wood background. */
}

/*////////// DETAILS //////////*/

#details {
  border-top: 1px solid white; /* This adds a subtle, yet important, accent or visual distinction between the #details and the white-wood background. */
  /* Note that this and the border-top on the footer add a nice 3D effect here. */
}

#details div {
  height: 221px;
}

#details a:link, a:visited { /* Depending on future lessons, I may need to change my edits to these rules for the links. */
  color: black;
  text-decoration: underline; /* This was set to none, but that makes it impossible to tell links apart from regular text. */
}

#details a:hover { 
  color: blue; /* This was set to black. I changed it for more contrast. */
  text-decoration: underline;
}

#details a:active {
  color: red;
}

/*////////// FOOTER //////////*/

footer {
  text-align: center;
  font-size: 0.75em; /* The font here is a little smaller than normal. */
  padding: 10px;
  background: #eee; /* Light gray */
  border-top: 1px solid #ccc; /* Medium gray border between #details and footer */
}

/*//////// MY SPECIAL NAV STYLES ////////*/

/* Note: I had to update these because I added another <nav> to the index page. */
/* It looks like I will have to update this again, since these styles don't work now. */

/* #logo + nav a:link {
  color: #03a9f4;
}

#logo + nav a:visited {
  color: purple;
}

#logo + nav a:hover {
  background: linear-gradient(to right, red, #00ff7f, blue);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  color: black;
  text-decoration-color: black;
}

#logo + nav a:active {
  color: white;
} */

/*//////// STYLING NOTES ////////*/

/* Note: I may later put these into a separate file. */

/*figcaption {
  /*font-weight: normal;
  font-size: 0.75em;
  line-height: 1.5em;
  font-family: Georgia, "Times New Roman", serif;
  font: normal 0.75em/1.5em 'Elsie Swash Caps', cursive; 
  /* Note: Georgia is MUCH easier to see than either of the imported fonts.
  color: #777;
  text-align: right;
}

.milk-text {
  font: bold 2.6em "Elsie Swash Caps", cursive;
  /* I may change the font to Clicker Script later.
  color: white;
  text-shadow: 0 2px 3px #000;
  
  /* Alternative background (without the image):
  background-color: #3297FD;
  display: inline-block;
}

/*.milk-text::selection {
  background-color: red;
}

/* .shadow {
  box-shadow: 0 3px 10px #333;
  /* box-shadow: [horizontal positioning] [vertical positioning] [blur radius] [color]; 
  /* horizontal positioning: 0 means it's centered on the element, not going off to the sides. Positive values shift the shadow right, while negative values shift it left.
  /* vertical positioning: 3px (a positive value) means it falls 3px below the element, 0 means it's centered on the element, and a negative value shifts the shadow upwards.
  /* blur radius: The shadow gets blurrier as this value gets higher.
  /* #333 is a dark gray.
  /* Note that only the horizontal and vertical positioning is required; "box-shadow: none;" is the default. 
  /* See https://www.w3schools.com/cssref/css3_pr_box-shadow.asp for more information.
  /* I had some fun here; I noticed that when you increase the vertical and/or horizontal offsets, the shadow grows bigger, and its element appears to be farther above the page. 
  Just don't go crazy with the blur radius! And changing the color has some neat effect, too!
}

.border-right { /* Applies a border on the right edge of an element.
  border-right: 1px dotted #ccc; /* #ccc is a medium gray. Also, play around with the border style (and width) to see the visual effect.
  padding-right: 30px; /* Adds space between the content and border.
}

.white-wood { /* Remember to do this when I want to add a background image! 
  /* To apply a background to multiple elements, it helps to wrap them all inside of a parent element; the parent should have this class (in this case).
  The children will automatically be placed on top of that background.
  background: url(../images/white-wood.jpg) no-repeat center top;
  /* background is shorthand for a lot of properties; the ones that we've used, in order, are: 
  background-image (given by the relative link url), background-repeat (it won't repeat on the page, in this case), and background-position (center being the x-position and top being the y-position).
  /* See https://www.w3schools.com/cssref/css3_pr_background.asp for more info.
  background-size: cover; /* Setting this to "cover" makes it take up the entire area of its container element. 
  See https://www.w3schools.com/cssref/css3_pr_background-size.asp for more info.
}

img, video, audio, iframe, table, form {
  /* This allows img, video, audio, etc. elements to be fluid in their sizing. 
  /* "They will always be 100% within the confines of their parent container (which in this case is the column that they're in)." 
  /* Correction: Their parent containers are the <figure> elements, which are then confined within the columns. 
  width: 100%; /* IE 
  max-width: 100%; /* FF, Safari, Chrome 
}

* { /* This solves a problem with width and padding (see the "section" selector). 
  -webkit-box-sizing: border-box; /* Older versions of Safari 
  -moz-box-sizing: border-box; /* Older versions of Firefox 
  box-sizing: border-box; /* Virtually everything else 
}

.clearfix::after { /* This solves the "collapsing parent element with floating children" issue. 
  content: ".";
  display: block;
  clear: both;
  visibility: hidden;
  height: 0;
  line-height: 0;
}

.clear {
  clear: both;
}

.wrapper {
  /* display: inline-block; 
  width: 960px;
  margin: 0 auto; /* Would it be better to use "text-align: center;" in the header instead of making this wrapper class? 
  /* Answer: no. Setting "text-align: center;" causes all of the text inside the header, logo, etc. to center (probably not what we want). And deleting "margin: 0 auto;" causes the wrapper to align with the left side of the screen. 
  /* Deleting the width causes the wrapper to take up the entire width of the screen! 
  /* Using "display: inline-block;" combined with setting the header's text-align to "center", instead of "margin: 0 auto;", doesn't look right, either. 
  /* I'll figure out the effects of deleting the wrapper itself (then setting "text-align: 0;" or “margin: 0 auto;” in the header) another time. 
  /* I have more notes related to this in my HTML and CSS document. 
}

/* In this part of the layout, we have (at most) a three-column structure. So, we've made three classes. 
/* Update (navbar-and-background-styles branch): The background colors were necessary for demonstrating column structure and positioning, but they have since been removed and replaced by a wood texture behind all of the webpage content.

.col-1 { /* Spans 1/3 of the space (its parent element, the wrapper) 
  float: left; /* Whenever we have a column structure where we need columns to exist side-by-side with other columns, we need them to float. 
  /* We want a margin of ~2% between each column. My guess: set margin to "0 1%", as I'm pretty sure the margins of columns will add together, not overlap.
  /* Update: we are instead taking 100% and subtracting 2% for each column, yielding the width of the space in-between. My initial thought changed to "margin: 31.333%;", but I think we'll instead set the WIDTH to 31.333%. 
  width: 32%; 
  /* Update 2: evidently, the columns are block-level, not inline, so their margins overlap. Therefore, to have 2% margin on each side of the element, we subtract 4% from 100% and get 96%. Dividing that by 3 yields the width of each column (32%). 
  /* Update 3: I don't think this yields 2% MARGIN on each side, but 2% PADDING! The border's width is 0 by default, but I think there is SOME margin by default. 
  /* Update 4: It's even SIMPLER than that! Check out the .col-2 notes below. 
  background: #ccc; /* This property is obsolete as of the navbar-and-background-styles branch.
}

.col-2 { /* Spans 2/3 of the wrapper (the width of TWO regular columns) 
  float: left;
  /* My guess: we still want 2% spacing on the left and right, so the width will be 100% - 4% - 32% - 4% = 2 x 32% - 4% = 60%. We subtract that extra 4% to get the needed spacing on the second column. 
  width: 66%; 
  /* I misunderstood. To get the width of each col-1, we calculated (100% - 4%) / 3% = 32%, yielding 2% margin between each column. 
  /* Now, col-2 takes up the space of 2 col-1's PLUS the space between them, so the width of col-2 = 2 x 32% + 2% = 66%. Draw it out; it makes sense! 
  background: #ccc; /* This property is obsolete as of the navbar-and-background-styles branch.
}

.col-3 { /* Spans across ALL of the wrapper's space 
  /* No floating is needed here, since this takes up the whole space, with nothing beside it. 
  /* Also, since this is a block-level element, its width is already 100% by default. 
  background: #ccc; /* This property is obsolete as of the navbar-and-background-styles branch.
}

[class*="col-"] { /* Note that this is also possible with [class|="col"] or [class^="col-"] 
  /* This is one solution to setting the margins of all of our columns, but it's not the best one. It will add an unnecessary 2% left margin to the left-most column.
  margin-left: 2%;
}

.first { /* Remember that this is a CLASS, not the :first or :first-child pseudo-class! 
  /* One solution to the problem in the [class*="col"] selector: add a class to the first column of each wrapper in our layout, and tell it not to have any margin. 
  /* I get the feeling that this is a bad idea, especially as our code grows. It doesn't appear to follow responsive design, and it will be hard to extend and debug. A partial solution: name it “left” instead.
  margin-left: 0; /* The original value was 0%, but the % is not needed. 
  /* Note: Be REALLY careful of the order that you write these selectors. [class*=”col”] and .first have the SAME specificity, so the one written later OVERRIDES the one written earlier! 
}

/* By default, #social's content is in the top left corner of the screen, and its <a> links are positioned inline/side-by-side. 
/* The goal is to get the <a> elements within #social to stack vertically and remain fixed in the top-right corner of the screen. Here was my FIRST attempt: 

/* #social {
  position: absolute; /* fixed; static; relative; 
  top: 0;
  right: 0; /* 10% 
}

#social a {
  display: block; /* This is needed, to override the default inline display. However, this only works for relative or static positioning.
  position: fixed; /* absolute;
  right: 100px; /* I had to additionally set this in order to see the links.
} 

/* Interesting: Everything I did seemed to work OK, except for one thing in "#social a": "position: fixed;" (or "position: absolute;" for that matter). 
/* When I did that (in an attempt to make it stick to the top of the screen), it made the entire #social element have 0 area! However, I can make it visible by setting the "right" property. 
/* Note that the #social element still has 0 area for fixed and absolute positioning, but if it's block level and either relative or static, then it only has 0 height. 
/* I think the answer to this question explains what's going on: https://stackoverflow.com/questions/5146971/fixed-position-div-not-staying-contained-in-wrapping-div-overlays-entire-screen 
/* I think it also made the <a> links in #social go beyond the browser window's boundaries! I will have to explore this later. 
/* Update: I don't know if what I said in the comment above is right, but this explains most if not ALL of my problem: https://stackoverflow.com/questions/33235406/why-absolutely-positioned-parent-element-width-is-zero 
/* I forgot that I can use top/bottom/left/right with "position: fixed;" as well as "absolute"; however, in both cases, the <a> elements' inner text overlap each other, though "position: absolute;" allows for another line of text. 

/* Attempt #2: 

/* #social {
  position: fixed; /* Update: I had the right idea here. 
  /* "display: block;" isn't needed here; that's the default. 
  top: 0; /* Jon Grover used different values here and below, along with additional styling.
  right: 0;
}

#social a {
  display: block; /* Update: I had the right idea here as well. Jon Grover simply added a few additional styles after this.
}

/* Jon Grover's solution: 

/* #social {
  position: fixed; /* Evidently, fixed positioning (by itself) overrides the block-level behavior of a <div> here. I'll have to check this out more.
  top: 200px; /* 200px downward from the top
  right: 20px; /* 20px leftward from the right
  width: 40px;
  z-index: 1; /* This ensures that the element is always on top of everything else.
}

#social a {
  display: block; /* This lets the links stack vertically.
  width: 40px;
  height: 40px;
  background: yellow;
}

header { /* Ignore the other header rule farther down!
  /* margin: 0 0 30px; /* Add some space between the header and the element below it (to see the wood texture and better separate the elements. 
  margin-bottom: 30px; /* I'm pretty sure that this is equivalent to the above statement, since the default top/right/bottom/left margin is zero. 
}

/* The navbar is going to be positioned above the logo. I was thinking, "Why not switch the navbar and the logo around in the HTML?" 
The answer: I probably could in this simple case, but I would need to make SURE that this wouldn't require a change in ANY of the CSS selectors that target those elements (which would be a pain to do!).
Also, we want to FIX this to the top of the page, so why cause extra work by changing the HTML?

#navbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 2; /* This makes SURE it's positioned on top of everything else.
  border-bottom: 1px solid #ccc;
  text-align: center; /* This causes everything inside of the #navbar to align to the center.
}

#navbar nav {
  border-left: 1px solid #ccc;
}

#navbar nav a { /* Selects all of the links in the navbar
  /* These links need to display side-by-side, with a width. By default, they display inline (side-by-side, but with no width allowed). 
  Conversely, block-level elements allow a width, but do not display side-by-side. Therefore, they need to display inline-block.
  display: inline-block;
  width: 16.6666667%; /* There are 6 links, each taking up 1/6 of the <nav>'s 100% width.
  margin: 0; /* The idea is to have no margin between the links, but I'm almost CERTAIN that this is the default.
  padding: 22px 0;
  text-transform: uppercase; /* I didn't know about this; it sets ALL text to uppercase, even if I write lowercase letters in their inner text.
  color: black; /* This overrides the default link color, blue.
  text-align: center; /* This may not be needed; it appears to be inherited from the #navbar element, anyway.
  border-right: 1px solid #ccc; /* This completes the border design started by the "#navbar nav" selector.
  text-decoration: none; /* The link will not have an underline.
  font: 1em, "Trebuchet MS", Arial, sans-serif; /* The required property values are the font-size and font-family; thus, 1em is the font-size, and Trebuchet MS is the font-family (with the other two values being backup fonts in case it's not recognized by a browser).
}

/* #navbar nav a.selected { /* This is for visually showing which page the user is on.
  The #navbar link with an almost-black (as opposed to light-fade) background and white (not black) text corresponds to the current page.
  /* Also, "a.selected" is overqualified, but it makes it more obvious that this style applies to a link. I may unqualify this later (".selected" instead).
  background: #333;
  color: white;
}

#logo h1 {
  font-family: 'Clicker Script', cursive;
}

#logo h2 {
  font-family: 'Elsie Swash Caps', cursive;
}

section {
  padding: 20px; /* This prevents the text from being right up against the edge. However, it ALSO increases the width of the element due to the W3C box model.
  /* This can easily be fixed by setting "box-sizing: border-box;" for all elements (as I did in the LAYOUT section). This forces the browser to use the IE box model.
  margin-bottom: 20px;
  /* Update (navbar-and-background-styles branch): if I understand right, these sections now have drop shadows on them.
} 

header { /* I think I may need to adjust the top margin below this on other pages.
  position: fixed; /* This has a WEIRD visual effect by itself!
  /* Also, if this ^ is set to absolute and positioned like below, it still has a margin from its first <h1> child.
  top: 0; /* Note: I didn't notice a change when adding the top and left properties; they may be the default.
  left: 0;
  width: 100%; /* This forces the header to stay within the width of the body.
  background: #fff; /* Check out the change of color everywhere!
  z-index: 1; /* This puts it above everything; that may be the default, anyway.
  /* text-align: center; /* This was my own experiment; see .wrapper for more info.
} /* Note: This rule is obsolete as of the navbar-and-background-styles branch.

#details div { /* Update (navbar-and-background-styles branch): The details section now has a gradient on it. Each of its sections also has a right border that acts as a vertical rule.
  height: 221px;
}

#details a:link, a:visited { 
  /* Remember to comma-separate selectors that have the same property values!
  This is called a compound selector.
  color: black;
  text-decoration: underline; /* This was set to none, but that makes it impossible to tell links apart from regular text.
}

#details a:hover { 
  color: blue; /* This was set to black. I changed it for more contrast.
  text-decoration: underline;
}

#details a:active {
  color: red;
}

/* This may be better form (possibly NOT, given the usual pseudo-class order):
#details a:link, a:hover, a:visited {
  text-decoration: underline;
}

#details a:link, a:visited {
  color: black;
}

#details a:hover {
  color: blue;
}

#details a:active {
  color: red;
}

/* Note: I had to update these because I added another <nav> to the index page (in the columns branch, I think).
/* It looks like I will have to update this again, since these styles don't work now.

#logo + nav a:link {
  color: #03a9f4;
}

/* #logo + nav a[target="_blank"]:link {
  /* There's a bug causing the HUD link to be purple even when NOT visited (at least in Chrome). I tried to fix it here, but without success.
  color: #03a9f4;
}

#logo + nav a:visited {
  color: purple;
}

#logo + nav a:hover { /* Webkit might only be mainly supported by Chrome and Safari.
  background: linear-gradient(to right, red, #00ff7f, blue);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent; /* This will somehow override the nav a:active color in some browsers. However, if I use "color: transparent;", this will render the text invisible in OTHER browsers!  More experimentation is needed; it may be a bug.
  color: black; /* For non-Webkit-supported browsers.
  text-decoration-color: black; /* This is not supported in Edge/IE.
}

#logo + nav a:active {
  color: white; /* This works in Firefox, but not in other browsers.
} */
