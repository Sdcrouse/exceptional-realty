@import url('https://fonts.googleapis.com/css?family=Elsie+Swash+Caps:400,900');
@import url('https://fonts.googleapis.com/css?family=Clicker+Script');

/* This 
is 
a comment! */

/* CSS Syntax:

selector {
  property: value;
  property: value;
}

*/

/* Type selector */

p { /* select all <p> */
  font-size: 1em; /* 16px, ?pt, 100%, 1em */
  line-height: 1.5em;
}

figcaption {
  /*font-weight: normal;
  font-size: 0.75em;
  line-height: 1.5em;
  font-family: Georgia, "Times New Roman", serif;*/
  font: normal 0.75em/1.5em 'Elsie Swash Caps', cursive; 
  /* Note: Georgia is MUCH easier to see than either of the imported fonts. */
  color: #777;
  text-align: right;
}

/* Class selector (applied to as many elements as you like) */

.milk-text { /* select elements with class="milk-text" */
  font: bold 2.6em "Elsie Swash Caps", cursive;
  /* I may change the font to Clicker Script later. */
  color: white;
  text-shadow: 0 2px 3px #000;
  
  /* Alternative background (without the image):
  background-color: #3297FD;
  display: inline-block; */
}

/*.milk-text::selection {
  background-color: red;
}*/


/* ID selector (apply to one unique element per page) */

#logo {  /* select elements with id="logo" */
  background: aqua;
}

/* Descendant Selector */

#logo h1 { /* selects <h1> if inside id="logo" */
  font-family: 'Clicker Script', cursive;
}

#logo h2 {
  font-family: 'Elsie Swash Caps', cursive;
}

/* Pseudo-Class Selector */

#details a:link, a:visited { 
  /* Remember to comma-separate selectors that have the same property values!
  This is called a compound selector. */
  color: black;
  text-decoration: underline; /* This was set to none, but that makes it impossible to tell links apart from regular text. */
}

#details a:hover { 
  color: blue; /* This was set to black. I changed it for more contrast. */
  text-decoration: underline;
}

#details a:active {
  color: red;
}

/* This may be better form (possibly NOT, given the usual pseudo-class order):
#details a:link, a:hover, a:visited {
  text-decoration: underline;
}

#details a:link, a:visited {
  color: black;
}

#details a:hover {
  color: blue;
}

#details a:active {
  color: red;
} */

/*//////// MY SPECIAL NAV STYLES ////////*/

nav a:link {
  color: #03a9f4;
}

/* nav a[target="_blank"]:link {
  /* There's a bug causing the HUD link to be purple even when NOT visited (at least in Chrome). I tried to fix it here, but without success.
  color: #03a9f4;
} */

nav a:visited {
  color: purple;
}

nav a:hover { /* Webkit might only be mainly supported by Chrome and Safari. */
  background: linear-gradient(to right, red, #00ff7f, blue);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent; /* This will somehow override the nav a:active color in some browsers. However, if I use "color: transparent;", this will render the text invisible in OTHER browsers!  More experimentation is needed; it may be a bug. */
  color: black; /* For non-Webkit-supported browsers. */
  text-decoration-color: black; /* This is not supported in Edge/IE. */
}

nav a:active {
  color: white; /* This works in Firefox, but not in other browsers. */
}

/*//////// MEDIA ////////*/

img, video, audio {
  /* This allows img, video, and audio elements to be fluid in their sizing. */
  /* "They will always be 100% within the confines of their parent container (which in this case is the column that they're in)." */
  /* Correction: Their parent containers are the <figure> elements, which are then confined within the columns. */
  max-width: 100%;
}

/*//////// LAYOUT ////////*/

* { /* This solves a problem with width and padding (see the "section" selector). */
  -webkit-box-sizing: border-box; /* Older versions of Safari */
  -moz-box-sizing: border-box; /* Older versions of Firefox */
  box-sizing: border-box; /* Virtually everything else */
}

.wrapper {
  width: 960px;
  margin: 0 auto; /* Would it be better to use "text-align: center;" in the header instead of making this wrapper class? */
  background: #eee; /* This is temporary, just so we see what we're doing initially. */
}

/* In this part of the layout, we will have (at most) a three-column structure. So, we'll make three classes: */

.col-1 { /* Spans 1/3 of the space (its parent element, the wrapper) */
  float: left; /* Whenever we have a column structure where we need columns to exist side-by-side with other columns, we need them to float. */
  /* We want a margin of ~2% between each column. My guess: set margin to "0 1%", as I'm pretty sure the margins of columns will add together, not overlap. */
  /* Update: we are instead taking 100% and subtracting 2% for each column, yielding the width of the space in-between. My initial thought changed to "margin: 31.333%;", but I think we'll instead set the WIDTH to 31.333%. */ 
  width: 32%; 
  /* Update 2: evidently, the columns are block-level, not inline, so their margins overlap. Therefore, to have 2% margin on each side of the element, we subtract 4% from 100% and get 96%. Dividing that by 3 yields the width of each column (32%). */
  /* Update 3: I don't think this yields 2% MARGIN on each side, but 2% PADDING! The border's width is 0 by default, but I think there is SOME margin by default. */
  /* Update 4: It's even SIMPLER than that! Check out the .col-2 notes below. */
  background: #ccc;
}

.col-2 { /* Spans 2/3 of the wrapper (the width of TWO regular columns) */
  float: left;
  /* My guess: we still want 2% spacing on the left and right, so the width will be 100% - 4% - 32% - 4% = 2 x 32% - 4% = 60%. We subtract that extra 4% to get the needed spacing on the second column. */
  width: 66%; 
  /* I misunderstood. To get the width of each col-1, we calculated (100% - 4%) / 3% = 32%, yielding 2% margin between each column. */
  /* Now, col-2 takes up the space of 2 col-1's PLUS the space between them, so the width of col-2 = 2 x 32% + 2% = 66%. Draw it out; it makes sense! */
  background: #ccc;
}

.col-3 { /* Spans across ALL of the wrapper's space */
  /* No floating is needed here, since this takes up the whole space, with nothing beside it. */
  /* Also, since this is a block-level element, its width is already 100% by default. */
  background: #ccc;
}

.clearfix::after { /* This solves the "collapsing parent element with floating children" issue. */
  content: ".";
  display: block;
  clear: both;
  visibility: hidden;
  height: 0;
  line-height: 0;
}

[class*="col-"] { /* Note that this is also possible with [class|="col"] or [class^="col-"] */
  /* This is one solution to setting the margins of all of our columns, but it's not the best one. It will add an unnecessary 2% left margin to the left-most column.*/
  margin-left: 2%;
}

.first { /* Remember that this is a CLASS, not the :first or :first-child pseudo-class! */
  /* One solution to the problem in the [class*="col"] selector: add a class to the first column of each wrapper in our layout, and tell it not to have any margin. */
  /* I get the feeling that this is a bad idea, especially as our code grows. It doesn't appear to follow responsive design, and it will be hard to extend and debug. */
  margin-left: 0; /* The original value was 0%, but the % is not needed. */
  /* Note: Be REALLY careful of the order that you write these selectors. [class*=”col”] and .first have the SAME specificity, so the one written later OVERRIDES the one written earlier! */
}

/*//////// SECTIONS ////////*/

header {
  position: fixed; /* This has a WEIRD visual effect by itself! */
  /* Also, if this ^ is set to absolute and positioned like below, it still has a margin from its first <h1> child. */
  top: 0; /* Note: I didn't notice a change when adding the top and left properties; they may be the default. */
  left: 0;
  width: 100%; /* This forces the header to stay within the width of the body. */
  background: #fff; /* Check out the change of color above the cyan background! */
  z-index: 1; /* This puts it above everything; that may be the default, anyway. */
}

section {
  padding: 20px; /* This prevents the text from being right up against the edge. However, it ALSO increases the width of the element due to the W3C box model. */
  /* This can easily be fixed by setting "box-sizing: border-box;" for all elements (as I did in the LAYOUT section above). This forces the browser to use the IE box model. */
  margin-bottom: 20px;
}

/*//////// SOCIAL ////////*/

/* By default, #social's content is in the top left corner of the screen, and its <a> links are positioned inline/side-by-side. */
/* The goal is to get the <a> elements within #social to stack vertically and remain fixed in the top-right corner of the screen. Here was my FIRST attempt: */

/* #social {
  position: absolute; /* fixed; static; relative; 
  top: 0;
  right: 0; /* 10% 
}

#social a {
  display: block; /* This is needed, to override the default inline display. However, this only works for relative or static positioning.
  position: fixed; /* absolute;
  right: 100px; /* I had to additionally set this in order to see the links.
} */

/* Interesting: Everything I did seemed to work OK, except for one thing in "#social a": "position: fixed;" (or "position: absolute;" for that matter). */
/* When I did that (in an attempt to make it stick to the top of the screen), it made the entire #social element have 0 area! However, I can make it visible by setting the "right" property. */
/* Note that the #social element still has 0 area for fixed and absolute positioning, but if it's block level and either relative or static, then it only has 0 height. */
/* I think the answer to this question explains what's going on: https://stackoverflow.com/questions/5146971/fixed-position-div-not-staying-contained-in-wrapping-div-overlays-entire-screen */
/* I think it also made the <a> links in #social go beyond the browser window's boundaries! I will have to explore this later. */
/* Update: I don't know if what I said in the comment above is right, but this explains most if not ALL of my problem: https://stackoverflow.com/questions/33235406/why-absolutely-positioned-parent-element-width-is-zero */
/* I forgot that I can use top/bottom/left/right with "position: fixed;" as well as "absolute"; however, in both cases, the <a> elements' inner text overlap each other, though "position: absolute;" allows for another line of text. */

/* Attempt #2: */

/* #social {
  position: fixed; /* Update: I had the right idea here. 
  /* "display: block;" isn't needed here; that's the default. 
  top: 0; /* Jon Grover used different values here and below, along with additional styling.
  right: 0;
}

#social a {
  display: block; /* Update: I had the right idea here as well. Jon Grover simply added a few additional styles after this.
} */

/* Jon Grover's solution: */

#social {
  position: fixed; /* Evidently, fixed positioning (by itself) overrides the block-level behavior of a <div> here. I'll have to check this out more. */
  top: 200px; /* 200px downward from the top */
  right: 20px; /* 20px leftward from the right */
  width: 40px;
  z-index: 1; /* This ensures that the element is always on top of everything else. */
}

#social a {
  display: block; /* This lets the links stack vertically. */
  width: 40px;
  height: 40px;
  background: yellow;
}